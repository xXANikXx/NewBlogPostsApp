import {
    bcryptService
} from "../../adapters/crypto/password-hasher";
import {jwtService} from "../../adapters/jwt.service";
import {UserDomainDto} from "../../../users/domain/user-domain.dto";
import {Result} from "../../../common/result/result.type";
import {ResultStatus} from "../../../common/result/resultCode";
import {WithId} from "mongodb";
import {usersRepository} from "../../../users/repositoriesUsers/users.repository";
import {LoginEmailError} from "../../../core/errors/login-email.error";

export const authService = {
    async loginUser(
        loginOrEmail: string,
        password: string,
    ): Promise<{ accessToken: string }> { // üëà –¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞ - —Ç–æ–ª—å–∫–æ –£–°–ü–ï–•

        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await usersRepository.findByLoginOrEmail(loginOrEmail);

        if (!user) {
            // üö® –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –ª–æ–≤–∏—Ç errorHandler –∫–∞–∫ 401
            throw new LoginEmailError('loginOrEmail', 'Wrong credentials');
        }

        const isPassCorrect = await bcryptService.checkPassword(password, user.passwordHash);

        if (!isPassCorrect) {
            // üö® –ë—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –ª–æ–≤–∏—Ç errorHandler –∫–∞–∫ 400 –∏–ª–∏ 401
            throw new LoginEmailError('password', 'Wrong password');
        }

        // 2. –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω
        const accessToken = await jwtService.createToken(user._id.toString(), user.login);

        // 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return { accessToken };
    },
};
